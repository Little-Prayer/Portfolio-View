@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Portfolio_View.Models
@page "/items/{id:int}"

@if (item is null)
{
    <p>読み込み中</p>
}
else
{
    @switch (current)
    {
        case displayState.Detail:
            <p> アイテム名：@item.Name </p>
            <p> 価格：@item.Price.ToString("N0") </p>
            <p>@(item.Ticks is null ? "-" : item.SwapFrequency?.TotalDays.ToString() + "日") </p>
            @if (item.Categories is null || item.Categories.Count == 0)
            {
                <p> なし </p>
            }
            else
            {
                <p>@(string.Join(",", item.Categories.Select(c => c.Name))) </p>
            }
            <p> 最終交換日：@(item.LastSwapDate?.ToString("yyyy年MM月dd日") ?? "なし") </p>
            <p> 交換予定日：@(item.SwapExpectedDate?.ToString("yyyy年MM月dd日") ?? "なし") </p>
            @foreach (var ev in item.Events!)
            {
                <p> @ev.Date </p>
            }
            <p>
                <button class="btn editbtn" @onclick=@(()=>current=displayState.ItemEdit)>編集</button>
            </p>
            <p>
                <button class="btn eventAddbtn" @onclick=@(()=>current=displayState.EventAddition)>イベント追加</button>
            </p>
            <p>
                <button class="btn deletebtn" @onclick="OnClickDeleteButton">削除</button>
            </p>

            <p><a href="items">戻る</a></p>
            break;

        case displayState.ItemEdit:
            <ItemEdit item="@item" CallBack="@ItemEditExecution" />
            break;
        case displayState.EventAddition:
            <EventAddition CallBack="@OnClickEventAddButton" />
            break;
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private Item? item;
    private displayState current = displayState.Detail;

    protected override async Task OnInitializedAsync() =>
    item = await Http.GetFromJsonAsync<Item>("item/" + id.ToString());

    private void ItemEditExecution(Item? _item)
    {
        if (_item is not null)
        {
            Http.PutAsJsonAsync($"item/{id}", _item);
        }
        current = displayState.Detail;
        this.StateHasChanged();
    }
    private async Task OnClickEventAddButton(Event? _event)
    {

    }

    private async Task OnClickDeleteButton()
    {
        await Http.DeleteFromJsonAsync<Item>($"item/{id}");
        NavigationManager.NavigateTo("items");
    }


    private enum displayState
    {
        Detail,
        ItemEdit,
        EventAddition
    }
}