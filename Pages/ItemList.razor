@inject HttpClient Http
@inject NavigationManager NavigationManager
@page "/items"
@page "/"

@if (itemList is null)
{
    <p>読み込み中</p>
}
else
{
    <table>
    <tr>
        <th>アイテム名</th>
        <th>価格</th>
        <th>交換頻度</th>
        <th>カテゴリ</th>
        <th>最終交換日</th>
        <th>交換予定日</th>
    </tr>
    @foreach (var item in itemList.OrderByDescending(i => i.SwapExpectedDate))
        {
            <tr>
                <td><a href="items/@(item.ItemId)">@item.Name</a></td>
                <td>@(item.Price.ToString("N0"))円</td>
                <td>@(item.Ticks is not null ? item.SwapFrequency?.TotalDays + "日" : "-")</td>
                <td>@(item.Categories!.Count > 0 ? string.Join(",", item.Categories.Select(c => c.Name)) : "なし")</td>
                <td>
                    @if (item.LastSwapDate is not null)
                    {
                        <a href="swaps/@(item.Swaps?.MaxBy(e=>e.Date)?.SwapId)">
                            @(item.LastSwapDate?.ToString("yyyy年MM月dd日"))
                        </a>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </td>
                <td>@(item.SwapExpectedDate?.ToString("yyyy年MM月dd日") ?? "-")</td>
            </tr>
        }
    </table>
    <button class="btn createbtn" @onclick=@(()=>NavigationManager.NavigateTo("items/new"))>新規作成</button>
}
@code {
    private List<Item>? itemList;

    protected override async Task OnInitializedAsync() =>
    itemList = await Http.GetFromJsonAsync<List<Item>>("item");
}
