@inject HttpClient Http

@if (categoryList is null)
{
    <p>読み込み中</p>
}
else
{
    @foreach (var cat in categoryList)
    {
        <p class=@(Categories!.Contains(cat) ? "Red":"") @onclick="()=>turningHasCategory(cat)">
    @(cat.Name + (Categories!.Contains(cat) ? "*" : ""))</p>
    }

    <p>
        <input @bind="newCategoryName">
        <button class="btn CategoryAddButton" @onclick="AddNewCategory">追加</button>
        @if (!string.IsNullOrEmpty(AddCategoryCaution))
        {
        <p>@AddCategoryCaution</p>
        }
    </p>
    <p>
        <button class="btn Editbtn" @onclick="@(async () => await Callback.InvokeAsync(Categories))">確定</button>
    </p>
}

@code
{
    [Parameter]
    public ISet<Category>? Categories { get; set; }
    [Parameter]
    public EventCallback<ISet<Category>> Callback { get; set; }

    private List<Category>? categoryList;

    private string? newCategoryName;
    private string? AddCategoryCaution;



    protected override async Task OnParametersSetAsync() =>
    categoryList = await Http.GetFromJsonAsync<List<Category>>("category");

    private void turningHasCategory(Category cat)
    {
        if (Categories!.Contains(cat))
        {
            Categories.Remove(cat);
        }
        else
        {
            Categories.Add(cat);
        }
        this.StateHasChanged();
    }

    private async Task AddNewCategory()
    {

        if (string.IsNullOrEmpty(newCategoryName))
        {
            AddCategoryCaution = "新規カテゴリ名が空白です";
        }
        else if (categoryList!.Any(c => c.Name == newCategoryName))
        {
            AddCategoryCaution = "既存のカテゴリ名と重複しています";
        }
        else
        {
            var newCategory = new Category() { Name = newCategoryName };
            await Http.PostAsJsonAsync("category", newCategory);
            categoryList = await Http.GetFromJsonAsync<List<Category>>("category");
            AddCategoryCaution = null;
        }
        newCategoryName = "";
        this.StateHasChanged();
    }
}